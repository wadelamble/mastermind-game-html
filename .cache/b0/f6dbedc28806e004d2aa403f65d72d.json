{"id":"Lysf","dependencies":[{"name":"C:\\Users\\wadel\\source\\repos\\mastermind-game-html-1\\node_modules\\@azure\\core-http\\es\\src\\operationSpec.js.map","includedInParent":true,"mtime":1599878181412},{"name":"C:\\Users\\wadel\\source\\repos\\mastermind-game-html-1\\package.json","includedInParent":true,"mtime":1599878181948},{"name":"C:\\Users\\wadel\\source\\repos\\mastermind-game-html-1\\node_modules\\@azure\\core-http\\package.json","includedInParent":true,"mtime":1599878181524},{"name":"./serializer","loc":{"line":3,"column":27},"parent":"C:\\Users\\wadel\\source\\repos\\mastermind-game-html-1\\node_modules\\@azure\\core-http\\es\\src\\operationSpec.js","resolved":"C:\\Users\\wadel\\source\\repos\\mastermind-game-html-1\\node_modules\\@azure\\core-http\\es\\src\\serializer.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.isStreamOperation=r;var e=require(\"./serializer\");function r(r){var a=!1;for(var p in r.responses){var s=r.responses[p];if(s.bodyMapper&&s.bodyMapper.type.name===e.MapperType.Stream){a=!0;break}}return a}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":13}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":20}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":35}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":43}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":56}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":57}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":64}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":68}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":76}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":1,"column":94}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":1,"column":96}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":1,"column":100}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":1,"column":102}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":1,"column":110}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":1,"column":126}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":16},"generated":{"line":1,"column":135}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":34},"generated":{"line":1,"column":137}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":99,"column":6},"generated":{"line":1,"column":140}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":99,"column":6},"generated":{"line":1,"column":144}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":99,"column":15},"generated":{"line":1,"column":147}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":7},"generated":{"line":1,"column":149}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":7},"generated":{"line":1,"column":153}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":13},"generated":{"line":1,"column":157}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":27},"generated":{"line":1,"column":162}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":41},"generated":{"line":1,"column":164}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":52},"generated":{"line":1,"column":174}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":10},"generated":{"line":1,"column":175}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":10},"generated":{"line":1,"column":179}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":49},"generated":{"line":1,"column":181}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":63},"generated":{"line":1,"column":183}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":73},"generated":{"line":1,"column":193}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":6},"generated":{"line":1,"column":196}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":6},"generated":{"line":1,"column":199}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":24},"generated":{"line":1,"column":201}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":6},"generated":{"line":1,"column":213}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":24},"generated":{"line":1,"column":215}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":35},"generated":{"line":1,"column":226}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":40},"generated":{"line":1,"column":231}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":49},"generated":{"line":1,"column":238}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":60},"generated":{"line":1,"column":240}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":60},"generated":{"line":1,"column":251}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":6},"generated":{"line":1,"column":258}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":1,"column":259}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":106,"column":15},"generated":{"line":1,"column":262}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":1,"column":264}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":9},"generated":{"line":1,"column":271}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":9},"generated":{"line":1,"column":278}}],"sources":{"../../src/operationSpec.ts":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  OperationParameter,\n  OperationQueryParameter,\n  OperationURLParameter\n} from \"./operationParameter\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { MapperType, Serializer } from \"./serializer\";\nimport { HttpMethods } from \"./webResource\";\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The media type of the request body.\n   * This value can be used to aide in serialization if it is provided.\n   */\n  readonly mediaType?:\n    | \"json\"\n    | \"xml\"\n    | \"form\"\n    | \"binary\"\n    | \"multipart\"\n    | \"text\"\n    | \"unknown\"\n    | string;\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\nexport function isStreamOperation(operationSpec: OperationSpec): boolean {\n  let result = false;\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse: OperationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperType.Stream\n    ) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n"},"lineCount":null}},"error":null,"hash":"682c226903c345cf3f9ee7a590e70451","cacheData":{"env":{}}}