{"id":"Fi3i","dependencies":[{"name":"C:\\Users\\wadel\\source\\repos\\mastermind-game-html-1\\package.json","includedInParent":true,"mtime":1599878181948},{"name":"C:\\Users\\wadel\\source\\repos\\mastermind-game-html-1\\node_modules\\@opentelemetry\\api\\package.json","includedInParent":true,"mtime":1599878181790}],"generated":{"js":"\"use strict\";var e;Object.defineProperty(exports,\"__esModule\",{value:!0}),function(e){e[e.NONE=0]=\"NONE\",e[e.SAMPLED=1]=\"SAMPLED\"}(e=exports.TraceFlags||(exports.TraceFlags={}));"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":23,"column":0},"generated":{"line":1,"column":13}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"TraceFlags","original":{"line":23,"column":4},"generated":{"line":1,"column":17}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"Object","original":{"line":17,"column":0},"generated":{"line":1,"column":19}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"defineProperty","original":{"line":17,"column":7},"generated":{"line":1,"column":26}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"exports","original":{"line":17,"column":22},"generated":{"line":1,"column":41}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":17,"column":31},"generated":{"line":1,"column":49}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":17,"column":45},"generated":{"line":1,"column":62}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"value","original":{"line":17,"column":47},"generated":{"line":1,"column":63}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":17,"column":54},"generated":{"line":1,"column":70}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":24,"column":0},"generated":{"line":1,"column":74}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"TraceFlags","original":{"line":24,"column":11},"generated":{"line":1,"column":83}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"TraceFlags","original":{"line":26,"column":4},"generated":{"line":1,"column":86}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"TraceFlags","original":{"line":26,"column":15},"generated":{"line":1,"column":88}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":26,"column":25},"generated":{"line":1,"column":90}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":26,"column":36},"generated":{"line":1,"column":95}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":26,"column":41},"generated":{"line":1,"column":98}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"TraceFlags","original":{"line":28,"column":4},"generated":{"line":1,"column":105}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"TraceFlags","original":{"line":28,"column":15},"generated":{"line":1,"column":107}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":28,"column":25},"generated":{"line":1,"column":109}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":28,"column":39},"generated":{"line":1,"column":117}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":28,"column":44},"generated":{"line":1,"column":120}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":24,"column":0},"generated":{"line":1,"column":130}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"TraceFlags","original":{"line":29,"column":3},"generated":{"line":1,"column":131}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"exports","original":{"line":29,"column":16},"generated":{"line":1,"column":133}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"TraceFlags","original":{"line":29,"column":24},"generated":{"line":1,"column":141}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"exports","original":{"line":29,"column":39},"generated":{"line":1,"column":154}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","name":"TraceFlags","original":{"line":29,"column":47},"generated":{"line":1,"column":162}},{"source":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","original":{"line":29,"column":60},"generated":{"line":1,"column":173}}],"sources":{"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js":"\"use strict\";\r\n/*!\r\n * Copyright 2019, OpenTelemetry Authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * An enumeration that represents global trace flags. These flags are\r\n * propagated to all child {@link Span}. These determine features such as\r\n * whether a Span should be traced. It is implemented as a bitmask.\r\n */\r\nvar TraceFlags;\r\n(function (TraceFlags) {\r\n    /** Represents no flag set. */\r\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\r\n    /** Bit to represent whether trace is sampled in trace flags. */\r\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\r\n})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));\r\n"},"lineCount":null}},"error":null,"hash":"cf2925beadb596a571721a03dc956bf4","cacheData":{"env":{}}}