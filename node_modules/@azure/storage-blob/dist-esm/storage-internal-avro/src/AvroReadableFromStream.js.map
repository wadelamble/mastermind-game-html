{"version":3,"file":"AvroReadableFromStream.js","sourceRoot":"","sources":["../../../../storage-internal-avro/src/AvroReadableFromStream.ts"],"names":[],"mappings":"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","sourcesContent":["import { AvroReadable } from \"./AvroReadable\";\n\nexport class AvroReadableFromStream extends AvroReadable {\n  private _position: number;\n  private _readable: NodeJS.ReadableStream;\n\n  private toUint8Array(data: string | Buffer): Uint8Array {\n    if (typeof data === \"string\") {\n      return Buffer.from(data);\n    }\n    return data;\n  }\n\n  // private _stillReadable: boolean;\n  constructor(readable: NodeJS.ReadableStream) {\n    super();\n    this._readable = readable;\n    this._position = 0;\n    // workaround due to Readable.readable only available after Node.js v11.4\n    // this._stillReadable = true;\n    // this._readable.on(\"end\", () => {\n    //   this._stillReadable = false;\n    // });\n    // this._readable.on(\"error\", () => {\n    //   this._stillReadable = false;\n    // });\n  }\n  public get position(): number {\n    return this._position;\n  }\n  public async read(size: number): Promise<Uint8Array> {\n    // console.log(`reading stream for size ${size} at position ${this._position}`);\n    if (size < 0) {\n      throw new Error(`size parameter should be positive: ${size}`);\n    }\n\n    if (size === 0) {\n      return new Uint8Array();\n    }\n\n    // readable is true if it is safe to call readable.read(), which means the stream has not been destroyed or emitted 'error' or 'end'.\n    // if (!this._stillReadable || this._readable.destroyed) {\n    if (!this._readable.readable) {\n      throw new Error(\"Stream no longer readable.\");\n    }\n    // See if there is already enough data, note that \"Only after readable.read() returns null, 'readable' will be emitted.\"\n    let chunk = this._readable.read(size);\n    if (chunk) {\n      this._position += chunk.length;\n      // chunk.length maybe less than desired size if the stream ends.\n      return this.toUint8Array(chunk);\n    } else {\n      // register callback to wait for enough data to read\n      return new Promise((resolve, reject) => {\n        const readableCallback = () => {\n          let chunk = this._readable.read(size);\n          if (chunk) {\n            this._position += chunk.length;\n\n            this._readable.removeListener(\"readable\", readableCallback);\n            this._readable.removeListener(\"error\", rejectCallback);\n            this._readable.removeListener(\"end\", rejectCallback);\n            this._readable.removeListener(\"close\", rejectCallback);\n\n            // chunk.length maybe less than desired size if the stream ends.\n            resolve(this.toUint8Array(chunk));\n          }\n        };\n\n        const rejectCallback = () => {\n          this._readable.removeListener(\"readable\", readableCallback);\n          this._readable.removeListener(\"error\", rejectCallback);\n          this._readable.removeListener(\"end\", rejectCallback);\n          this._readable.removeListener(\"close\", rejectCallback);\n          reject();\n        };\n\n        this._readable.on(\"readable\", readableCallback);\n        this._readable.once(\"error\", rejectCallback);\n        this._readable.once(\"end\", rejectCallback);\n        this._readable.once(\"close\", rejectCallback);\n      });\n    }\n  }\n}\n"]}